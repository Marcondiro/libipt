; Copyright (c) 2024, Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
;  * Redistributions of source code must retain the above copyright notice,
;    this list of conditions and the following disclaimer.
;  * Redistributions in binary form must reproduce the above copyright notice,
;    this list of conditions and the following disclaimer in the documentation
;    and/or other materials provided with the distribution.
;  * Neither the name of Intel Corporation nor the names of its contributors
;    may be used to endorse or promote products derived from this software
;    without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.

; Test TRIG with instruction attribution
;
; Variant: preceding MODE.EXEC+FUP as well as TRIG
;
; opt:ptxed --event:iflags
;

org 0x1000
bits 64

; @pt p0: psb()
; @pt p1: mode.exec(64bit)
; @pt p2: fup(3: %l0)
; @pt p3: psbend()

; @pt p4: mode.exec(64bit, if)
; @pt p5: fup(1: %l1)
l0: sti
; @pt p6: trig(0xa1, icnt: 0)
l1: call l3
l2: hlt

; @pt p7: trig(0xa2, icnt: 1)
; @pt p8: trig(0xa3, icnt: 0)
l3: jmp l5
l4: hlt

l5: nop

; @pt p9: trig(0xa4, icnt: 2)
; @pt p10:fup(1: %l6)
; @pt p11:tip.pgd(0: %l6)
l6: hlt


; @pt .exp(ptdump)
;%0p0   psb
;%0p1   mode.exec  cs.l
;%0p2   fup        3: %?l0
;%0p3   psbend
;%0p4   mode.exec  cs.l, if
;%0p5   fup        1: %?l1.2
;%0p6   trig       a1, icnt: 0
;%0p7   trig       a2, icnt: 1
;%0p8   trig       a3, icnt: 0
;%0p9   trig       a4, icnt: 2
;%0p10  fup        1: %?l6.2
;%0p11  tip.pgd    0: %?l6.0


; @pt .exp(ptxed)
;%0l0       # sti
;[interrupts enabled]
;[trig a1]
;%0l1       # call l3
;[trig a2]
;[trig a3]
;%0l3       # jmp l5
;%0l5       # nop
;[trig a4]
;[disabled]
