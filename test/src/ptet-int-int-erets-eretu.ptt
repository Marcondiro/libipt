; Copyright (C) 2024-2025 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
;  * Redistributions of source code must retain the above copyright notice,
;    this list of conditions and the following disclaimer.
;  * Redistributions in binary form must reproduce the above copyright notice,
;    this list of conditions and the following disclaimer in the documentation
;    and/or other materials provided with the distribution.
;  * Neither the name of Intel Corporation nor the names of its contributors
;    may be used to endorse or promote products derived from this software
;    without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.

; Test that an INT followed by a nested #pf followed by ERETS and ERETU are
; decoded correctly.
;
; Not sure if this is a valid scenario but the point is to test the decoder.
;
; Variant: event tracing enabled
;          test that CVE.IRET could be bound to the ERETS and ERETU
;          instructions (artificial)
;

org 0x100000
bits 64

; @pt p0: psb()
; @pt p1: fup(3: %l0)
; @pt p2: mode.exec(64bit, if)
; @pt p3: psbend()
l0: nop

; @pt p4: cfe(1: 42)
; @pt p5: fup(1: %l1)
; @pt p6: tip(3: %l4)
l1: int 42
l2: nop
l3: hlt

; @pt p7: evd(0: 0xf00baa)
; @pt p8: cfe(1: 14)
; @pt p9: fup(1: %l4)
; @pt p10: tip(3: %l7)
l4: mov rax, [rbx]
l5: db 0xf3, 0x0f, 0x01, 0xca; eretu
l6: hlt

; @pt p11: cfe(2)
; @pt p12: tip(3: %l4)
l7: db 0xf2, 0x0f, 0x01, 0xca; erets
l8: hlt

; @pt p13: cfe(2)
; @pt p14: tip(3: %l2)

; @pt p15: fup(1: %l3)
; @pt p16: tip.pgd(0: %l3)


; @pt .exp(ptdump)
;%0p0  psb
;%0p1  fup        3: %0l0
;%0p2  mode.exec  cs.l, if
;%0p3  psbend
;%0p4  cfe        1: 42
;%0p5  fup        1: %?l1.2
;%0p6  tip        3: %?l4
;%0p7  evd        0: f00baa
;%0p8  cfe        1: 14
;%0p9  fup        1: %?l4.2
;%0p10 tip        3: %?l7
;%0p11 cfe        2
;%0p12 tip        3: %?l4
;%0p13 cfe        2
;%0p14 tip        3: %?l2
;%0p15 fup        1: %?l3.2
;%0p16 tip.pgd    0: %?l3.0


; @pt .exp(ptxed)
;%0l0                                   # nop
;[interrupt 42]                         # int 42
;[interrupt]
;[interrupt 14, cr2: 0000000000f00baa]  # mov rax, [rbx]
;[interrupt]
;%0l7                                   # erets
;[iret]
;%0l4                                   # mov rax, [rbx]
;%0l5                                   # eretu
;[iret]
;%0l2                                   # nop
;[disabled]
